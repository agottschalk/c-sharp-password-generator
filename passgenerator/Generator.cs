using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace PassGenerator
{
    //class for generating passwords
    class Generator
    {
        //the list of words pulled from when the "words" box is checked
        private string[] wordlist;
        private Random _random;
        private RNGCryptoServiceProvider _secureRandom;

        public Generator(string[] words, Random rand, RNGCryptoServiceProvider secRand)
        {
            wordlist = words;
            _random = rand;
            _secureRandom = secRand;
        }

        #region Simple Password Generator Methods

        //-primary method for generating passwords
        //-is straightforward but the strings it generates are not cryptographically secure
        //-should be used for easy to remember passwords where security is not especially important
        public string generatePassword(int words, int letters, int numbers, int specials)
        {
            //this list holds all the pieces which will be put together in the password
            List<Object> elements = new List<Object>();


            //the following four loops randomly choose the specified number of words,
            //letters, numbers and special characters and add them to the 'elements' list

            for(int i=0; i<words; i++)
            {
                elements.Add(wordlist[_random.Next(wordlist.Length)]);
            }

            for(int i=0; i<letters; i++)
            {
                char c = (char)_random.Next(97, 122);

                if (Properties.Settings.Default.useCapitalsInSimple
                    && _random.Next()%2 == 0)
                {
                    c = Char.ToUpper(c);
                }

                elements.Add(c);
            }

            for (int i = 0; i<numbers; i++)
            {
                elements.Add(_random.Next(10));
            }

            for (int i = 0; i < specials; i++)
            {
                elements.Add((char)_random.Next(33, 47));
            }

            
            //initializes new password as an empty string
            StringBuilder password = new StringBuilder();


            //this loop takes each of the items in the 'elements' list and puts them together in a
            //random order
            while (elements.Any())
            {
                int index = _random.Next(elements.Count);
                password.Append(elements.ElementAt(index));

                elements.RemoveAt(index);
            }


            return password.ToString();
        }

        #endregion


        #region Secure Password Generator Methods

        public string generateSecure(int length, bool specs)
        {
            if (specs)
            {
                return generateSecure(length);
            }
            else
            {
                return generateSecureAlphaOnly(length);
            }
        }


        //uses RNGCryptoServiceProvider to create a cryptographically secure string of random characters
        public string generateSecure(int length)
        {
            //fill array with bytes that will become the characters in the password
            byte[] sourceBytes = new byte[length];
            _secureRandom.GetBytes(sourceBytes);


            StringBuilder newPassword = new StringBuilder();

            //convert randomly generated bytes into characters and add them to passwrod
            for(int i=0; i<sourceBytes.Length; i++)
            {
                //33-126 is the range of values for unicode characters on most keyboards
                newPassword.Append((char)(33 + (sourceBytes[i] % 93)));
            }

            return newPassword.ToString();
        }
        

        //returns cryptographically secure string of only upper- and lowercase letters for easier typing
        public string generateSecureAlphaOnly(int length)
        {
            //generate array of random bytes
            byte[] sourceBytes = new byte[length];
            _secureRandom.GetBytes(sourceBytes);

            //partially convert random bytes to proper range of unicode values for letters
            for(int i=0; i<sourceBytes.Length; i++)
            {
                sourceBytes[i] =(byte) (65 + (sourceBytes[i] % 52));
            }


            StringBuilder newPassword = new StringBuilder();

            //generate password string, finish converting byte values
            foreach (byte b in sourceBytes)
            {
                //Uppercase letters are 65 - 90, anything outside that range
                //gets converted to lowercase letters at 97 - 122.
                if (b < 91)
                {
                    newPassword.Append((char)b);
                }
                else
                {
                    newPassword.Append((char)(b + 6));
                }
            }

            return newPassword.ToString();
        }

        #endregion



    }
}
